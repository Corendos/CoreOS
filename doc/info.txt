+------------ I. General Knowledge ------------+

When booting, the GPU loads the kernel.


In the documentation, the peripherals adresses are given at bus adress and must be translated
to physical adress.
0x7Ennnnnn -> 0x3Fnnnnnn

By default the GPU has 64Mb of memory and the remaining part is given to the CPU.

BL instruction set the return adress in LR.

+------------ II. Theory ------------+

+------------ 1. About Process Switching ------------+

Procedure to activate a process:
	- Store the stack pointer in r0
		call activate(stack_pointer)
	- Save kernel space -> push
	- Change the stack pointer value
	- Load user state -> pop
	- Jump to the task

	The register r4 - r12, r14, r15 are saved.
	We must put the adress of the start code in r15 because we branch to this adress

+------------ 2. The Stack ------------+

	The stack grows downward
	Example:
		push {r4 - r12}

		+--------+
		|   r4   |
		+--------+
		|   r5   |
		+--------+
		|   r6   |
		+--------+
		|   r7   |
		+--------+
		|   r8   |
		+--------+
		|   r9   |
		+--------+
		|  r10   |
		+--------+
		|  r11   |
		+--------+
		|  r12   |
		+--------+

	When creating a stack, we now that the user stack looks like this:

		+-----+--------+
		| 255 |  r14   |
		+-----+--------+
		| 254 |  r11   |
		+-----+--------+
		| 253 |  r10   |
		+-----+--------+
		| 252 |   r9   |
		+-----+--------+
		| 251 |   r8   |
		+-----+--------+
		| 250 |   r7   |
		+-----+--------+
		| 249 |   r6   |
		+-----+--------+
		| 248 |   r5   |
		+-----+--------+
		| 247 |   r4   |
		+-----+--------+
		| ... |   ..   |

+------------ 3. Register Other Names ------------+

Stack Pointer: r13 					-> Hold the stack pointer
Link register: r14 					-> Hold the caller's return address
Program Counter: r15				-> Hold the program counter
Current Program Status Register 	-> Hold the current status