+------------ I. General Knowledge ------------+

When booting, the GPU loads the kernel.


In the documentation, the peripherals addresses are given at bus address and must be translated
to physical address.
0x7Ennnnnn -> 0x20nnnnnn

By default the GPU has 64Mb of memory and the remaining part is given to the CPU.

BL instruction set the return address in LR.

Each process has his own heap, stack, etc.
THe paging works with 2 tables, one for the system, and one shared between processes.

+------------ II. Theory ------------+

+------------ 1. About Process Switching ------------+

Procedure to activate a process:
	- Store the stack pointer in r0
		call activate(stack_pointer)
	- Save kernel space -> push
	- Change the stack pointer value
	- Load user state -> pop
	- Jump to the task

	The register r4 - r12, r14, r15 are saved.
	We must put the address of the start code in r15 because we branch to this address

+------------ 2. The Stack ------------+

	The stack grows downward
	Example:
		push {r4 - r12}

		+--------+
		|   r4   |
		+--------+
		|   r5   |
		+--------+
		|   r6   |
		+--------+
		|   r7   |
		+--------+
		|   r8   |
		+--------+
		|   r9   |
		+--------+
		|  r10   |
		+--------+
		|  r11   |
		+--------+
		|  r12   |
		+--------+

	When creating a stack, we now that the user stack looks like this:

		+-----+--------+
		| 255 |  r14   |
		+-----+--------+
		| 254 |  r11   |
		+-----+--------+
		| 253 |  r10   |
		+-----+--------+
		| 252 |   r9   |
		+-----+--------+
		| 251 |   r8   |
		+-----+--------+
		| 250 |   r7   |
		+-----+--------+
		| 249 |   r6   |
		+-----+--------+
		| 248 |   r5   |
		+-----+--------+
		| 247 |   r4   |
		+-----+--------+
		| ... |   ..   |

+------------ 3. Register Other Names ------------+

Stack Pointer: r13 					-> Hold the stack pointer
Link register: r14 					-> Hold the caller's return address
Program Counter: r15				-> Hold the program counter
Current Program Status Register 	-> Hold the current status

+------------ 4. Interrupt Vector ------------+
0x00000000		->	reset vector
0x00000004		->	undefined instruction vector
0x00000008		->	service call vector
0x0000000C		->	prefetch abort vector
0x00000010		->	data abort vector
0x00000014		->	unused
0x00000018		->	interrupt vector
0x0000001C		->	fast interrupt vector



+------------ III. Compilation ------------+

+------------ 1. C file ------------+

	We need to use: arm-none-eabi-gcc -mcpu=arm1176jzf-s -fpic -ffreestanding -std=gnu99 -O2 -Wall -Wextra -c $file -o $file_base_name.o

+------------ 2. ASM file ------------+

	We need to use: arm-none-eabi-gcc -mcpu=arm1176jzf-s -fpic -ffreestanding -Wall -Wextra -c $file_name -o $file_base_name.o

+------------ 3. Linking step ------------+

	We need to use: arm-none-eabi-gcc -T linker.ld -o name.elf -ffreestanding -O2 -nostdlib ".o files"
